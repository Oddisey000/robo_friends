{"version":3,"sources":["components/ErrorBoundry.js","components/header/header.component.js","components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","containers/App.js","redux/actions.js","redux/constants.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Header","nextProps","nextState","className","Card","id","name","email","src","alt","CardList","robots","map","el","i","key","SearchBox","searchChange","type","placeholder","onChange","App","onRequestRobots","searchfield","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.99eafb6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. That is not good</h1>\r\n    } else {\r\n      return this.props.children\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\n// Create Header component to avoid not needed rerendering\r\nclass Header extends Component {\r\n  // Implementing React hook to not allow component update. If function return false then component not been updated\r\n  shouldComponentUpdate(nextProps, nextState) {return false;}\r\n\r\n  render() {\r\n    return <h1 className=\"app-logo f1\">RoboFriends</h1>\r\n  }\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n// Generate a card component by using robohash resource to generate new robot image\r\nconst Card = ({id, name, email}) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 ma2 grow bw2 shadow-5 tc\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"The robot for the card\"/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from '../card/card.component';\r\n\r\n/**\r\n * Take robots arry from index.js\r\n * Create a map from the array\r\n * Wrap all return state into div\r\n * Use card component for creating this component for each element\r\n */\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((el, i) => {\r\n          return (\r\n            <Card \r\n              key={robots[i].id}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n/**\r\n * Take searchChange wich is onSearchChange function declaration from the App component\r\n * If input field's value was changed - user searchChange parameter to call the onSearchChange function\r\n */\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport './App.css';\n\n// Collect possible errors\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n// Import custom components\nimport Header from '../components/header/header.component';\nimport CardList from '../components/card-list/card-list.component';\nimport SearchBox from '../components/search-box/search-box.component';\n\n// Import Redux actions\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../redux/actions';\n\n// Configuring mapStateToProps and mapDespatchToProps Redux functions\nconst mapStateToProps = state => {\n  return {\n    searchfield: state.searchRobots.searchfield,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\nconst mapDespatchToProps = (dispatch) => {\n  return {\n    // For onSearchChange now Redux is responsible and dispatch as new action\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    // Handling robots request by Reducer and Reducer's action\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() { this.props.onRequestRobots(); }\n\n  render() {\n    // Import objects from redux props\n    const { searchfield, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return (\n        robot.name.toLowerCase()\n        .includes(\n          searchfield.toLowerCase()\n        )\n      );\n    });\n\n    if (isPending) return <h1 className=\"app-logo f1 tc\">Loading</h1>\n    \n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={ onSearchChange } />\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </div>\n    );\n  }\n}\n\n// Using connect Redux method to controll App's state\nexport default connect(mapStateToProps, mapDespatchToProps)(App);","// Import all the constants\r\nimport { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n// Export data to reducer from all part of the application wich is require state changes\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\n// Create and dispatch robots payload\r\nexport const requestRobots = () => (dispatch) => {\r\n  // If there is no payload it can have only type property\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  // Now fetch the data\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    // If there is data then dispatch an object payload will be data from the API\r\n    .then(data => dispatch({\r\n      type: REQUEST_ROBOTS_SUCCESS,\r\n      payload: data\r\n    }))\r\n    // Catch error if there is an error during request and dispatch it as payload\r\n    .catch(error => dispatch({\r\n      type: REQUEST_ROBOTS_FAILED,\r\n      payload: error\r\n    }))\r\n};","// Setting the constant names for easier manipulate state and prevent potential errors\r\n// Create constants for synchronous requests\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n// Create constants for asynchronous requests\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Import all the constants\r\nimport { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\n// Set all parameters of initial state of the search field\r\nconst initialStateSearch = {\r\n  searchfield: ''\r\n};\r\n\r\n// Create search robots reducer\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchfield: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Setting the initial state for robots array\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\n// Create request data for users-robots reducer\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch(action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};","// Support for older browsers\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\n// Standard imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Third party packages\nimport 'tachyons';\n\n// Import Redux to the project\n// Combine reducers with inbuild function\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// Uncomment import below if you need redux logging into console\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n// Import reducers\nimport { searchRobots, requestRobots } from './redux/reducers';\n\n// Creat root Redux reducer for the app\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\n// Create variables for Redux, create and apply middleware to the store\n// Uncomment logger variable and add it to applyMiddleware to se all what happens in console.log\n// const logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// Use Provider component to pass store to all components across the app\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}