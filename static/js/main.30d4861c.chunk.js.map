{"version":3,"sources":["components/ErrorBoundry.js","components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","containers/App.js","serviceWorker.js","index.js"],"names":["ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Card","id","name","email","className","src","alt","CardList","robots","map","el","i","key","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"6PAuBeA,G,mBApBb,WAAYC,GAAQ,IAAD,8BACjB,+CACKC,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,uDAEAG,KAAKL,MAAMO,a,GAhBGC,cCaZC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,yBAAKC,UAAU,mDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,2BACpD,6BACE,4BAAKJ,GACL,2BAAIC,MCoBGI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAIC,GACd,OACE,kBAAC,EAAD,CACEC,IAAKJ,EAAOG,GAAGV,GACfA,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCDhBU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,yBAAKV,UAAU,OACb,2BACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MC2DHI,E,YAhDb,aAAe,IAAD,8BACZ,+CAiBFC,eAAiB,SAACC,GAChB,EAAKvB,SAAS,CAAEwB,YAAaD,EAAME,OAAOC,SAjB1C,EAAK/B,MAAQ,CACXgB,OAAQ,GACRa,YAAa,IAJH,E,iFAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAK/B,SAAS,CAAEW,OAAQoB,S,+BAQnB,MAEyBhC,KAAKJ,MAA7BgB,EAFD,EAECA,OAAQa,EAFT,EAESA,YACVQ,EAAiBrB,EAAOsB,QAAO,SAAAC,GACnC,OACEA,EAAM7B,KAAK8B,cACVC,SACCZ,EAAYW,kBAKlB,OAAKxB,EAAO0B,OAGV,yBAAK9B,UAAU,MACb,wBAAIA,UAAU,eAAd,eACA,kBAAC,EAAD,CAAWU,aAAclB,KAAKuB,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUX,OAAQqB,MAPG,wBAAIzB,UAAU,kBAAd,e,GAnCbL,aCXEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCPNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAvD,GACLwD,QAAQxD,MAAMA,EAAMyD,a","file":"static/js/main.30d4861c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. That is not good</h1>\r\n    } else {\r\n      return this.props.children\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\n// Generate a card component by using robohash resource to generate new robot image\r\nconst Card = ({id, name, email}) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 ma2 grow bw2 shadow-5 tc\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"The robot for the card\"/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from '../card/card.component';\r\n\r\n/**\r\n * Take robots arry from index.js\r\n * Create a map from the array\r\n * Wrap all return state into div\r\n * Use card component for creating this component for each element\r\n */\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((el, i) => {\r\n          return (\r\n            <Card \r\n              key={robots[i].id}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n/**\r\n * Take searchChange wich is onSearchChange function declaration from the App component\r\n * If input field's value was changed - user searchChange parameter to call the onSearchChange function\r\n */\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\" \r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport './App.css';\n\n// Collect possible errors\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n// Import custom components\nimport CardList from '../components/card-list/card-list.component';\nimport SearchBox from '../components/search-box/search-box.component';\n\n/**\n * Declare the constructor and use state in application\n * To access React state super() need to be called\n * Declare robots data and search field wich is empty by default\n * When component did mount - fetch data from API and fill in robots array\n * When onSearchChange is called - reset application state's searchfield\n * Using filter method to check wich array element includes searched characters in its name\n * Use lowerCase to garantie correct comparison\n * Store data inside variable and use it in App's return state\n * If no data is in robots array show loading text to user\n * Use searchChange in property to send necessary data searchBox component\n * Use array of data wich is by default the complete robots array but when user interact with it - the array could be completely changed\n */\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n      return response.json();\n    })\n    .then(users => {\n      this.setState({ robots: users });\n    });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  }\n\n  render() {\n    // Destructuring this.state\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return (\n        robot.name.toLowerCase()\n        .includes(\n          searchfield.toLowerCase()\n        )\n      );\n    });\n\n    if (!robots.length) return <h1 className=\"app-logo f1 tc\">Loading</h1>\n    \n    return (\n      <div className=\"tc\">\n        <h1 className=\"app-logo f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n// Third party packages\nimport 'tachyons';\n\n// Giving data to Card component\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}